import sys

class Field:
  name=''
  type=''

  def __init__(self, name, type):
    self.name = name
    self.type = type

class Table:
  fields=[]
  name=''

  def __init__(self, name):
    self.name = name

  def setFields(self, field_list):
    fields = field_list

  def fieldsToMethods(self):
    return '  public void...'

  def toClass(self):
    return "public class "+self.name+"{\n"+self.fieldsToMethods()+"\n}"



def getClassBegin(class_name):
  return "public class "+class_name+"{"

def getMethod(field_name, field_type):
  field_name_camel_case='c'+field_name+'c'
  if(field_type=="'VARCHAR2'"):
    return '  public String get'+field_name_camel_case+'(){\n    return this.'+field_name+';\n  }'
  elif(field_type=="'NUMBER'"):
    return '  public long get'+field_name_camel_case+'(){\n    return this.'+field_name+';\n  }'
  return ''

def getClassEnd():
  return "}"

debug = True

INPUT_NUMBER_OF_COLUMNS = 2

COLUMN_INDEX_TABLE_NAME = 0
COLUMN_INDEX_FIELD_NAME = 1
COLUMN_INDEX_FIELD_TYPE = 2

if(len(sys.argv) == 1):
  print "no input file path specified."
  exit(0)

input_file_path=sys.argv[1]

input_file = open(input_file_path, "r")

STATE_INITIAL = -1
STATE_OPEN_CLASS = 0
STATE_ADD_METHODS_TO_CLASS = 1
STATE_CLOSE_CLASS = 2

current_state = STATE_OPEN_CLASS

previous_table_name = ''
first_class = True

current_file_text = ''
line_count = 1

table_list = []
field_list = []

for line in input_file:
  if( len(line.strip()) < INPUT_NUMBER_OF_COLUMNS ):
    print "each line should have 3 columns. line "+str(line_count)+" skipped."
  else:
    csv_columns = line.strip().split(",")

    table_name = csv_columns[COLUMN_INDEX_TABLE_NAME]
    field_name = csv_columns[COLUMN_INDEX_FIELD_NAME]
    field_type = csv_columns[COLUMN_INDEX_FIELD_TYPE]

    if(first_class):
      previous_table_name = table_name
      first_class = False

    if(previous_table_name != table_name):
      current_state = STATE_CLOSE_CLASS

    if(current_state == STATE_CLOSE_CLASS):
      a_table = Table(table_name)
      a_table.setFields(field_list)

      print a_table.toClass()

      table_list.append(a_table)

      field_list = []

      current_file_text += '\n'+getClassEnd()
      previous_table_name = table_name
      current_state = STATE_OPEN_CLASS

    if(current_state == STATE_OPEN_CLASS):
      current_file_text += '\n\n'+getClassBegin(table_name)
      current_state = STATE_ADD_METHODS_TO_CLASS

    if(current_state == STATE_ADD_METHODS_TO_CLASS):
      current_file_text += '\n'+getMethod(field_name, field_type)
      field_list.append(Field(field_name, field_type))

  line_count += 1
current_file_text += '\n'+getClassEnd()

#print current_file_text
print "Tables collected: "+str(len(table_list))

#for tab in table_list:
  #print tab.toClass()
